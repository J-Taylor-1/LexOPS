% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/control_for.R
\name{control_for}
\alias{control_for}
\title{Control for confounding variables.}
\usage{
control_for(df, var, stringCol = "string", condCol = NA)
}
\arguments{
\item{df}{A data frame that is the result from \code{split_by()}.}

\item{var}{A list object specifying the variable to be controlled for in the form, \code{list("variable_column", c(-0.2, 0.2))}, where the first item is the column that specified the IV, and the second argument is a vector indicating the tolerance.}

\item{stringCol}{The column containing the strings (default = "string").}

\item{condCol}{Prefix with which the columns detailing the splits were labelled by \code{split_by()}. This is rarely needed (default = NA), as by default the function gets this information from \code{df}'s attributes.}
}
\value{
Returns \code{df}, with details on the variables to be controlled for added to the attributes. Run the \code{generate()} function to then generate the actual stimuli.
}
\description{
Specifies variables that should be controlled for in the generated stimuli, after splitting. Can be run multiple times to control for multiple variables.
}
\examples{

# Create 3 levels of syllables, for 1-3, 4-6, and 7-20 syllables, and control for word frequency
lexops \%>\%
  split_by(list("Syllables.CMU", c(1, 3), c(4, 6), c(7, 20))) \%>\%
  control_for(list("Zipf.SUBTLEX_UK", c(-0.2, 0.2)))

# Control for multiple variables
lexops \%>\%
  split_by(list("Syllables.CMU", c(1, 3), c(4, 6), c(7, 20))) \%>\%
  control_for(list("Zipf.SUBTLEX_UK", c(-0.2, 0.2))) \%>\%
  control_for("PoS.SUBTLEX_UK")

}
